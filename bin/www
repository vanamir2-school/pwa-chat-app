#!/usr/bin/env node

/*  Module dependencies. */
const app = require('../app');
const debug = require('debug')('chat-pwa-backend:server');
const http = require('http');
const webSocketServer = require('websocket').server;

/* Get port from environment and store in Express. */
const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/* Create HTTP & webSocket server. */
const server = http.createServer(app);
const wsServer = new webSocketServer({
    httpServer: server
});

/* Listen on provided port, on all network interfaces. */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* Normalize a port into a number, string, or false. */
function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/* Event listener for HTTP server "error" event. */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/* Event listener for HTTP server "listening" event.*/
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/* Start websocket */

//init Websocket ws and handle incoming connect requests
// Generates unique ID for every new connection
const getUniqueID = () => {
    const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    return s4() + s4() + '-' + s4();
};

// I'm maintaining all active connections in this object
const connectedClients = {};
// I'm maintaining all active users in this object
const usersIdToEmail = {};
const usersEmailToId = {};

// this function is started based on chat/message ADD action - invokes client refresh
module.exports.sendMsg = function sendMessage(message, emails) {
    console.log('Send notification to active chats invoked...' + JSON.stringify(emails));
    emails.forEach(email => {
        // if there is an active webSocket with select user
        if (usersEmailToId[email.user_email] !== undefined) {
            console.log('Sending notification to...' + JSON.stringify(email.user_email));
            // take that user ID and send him a massege through webSocket
            let userId = usersEmailToId[email.user_email];
            connectedClients[userId].sendUTF(message);
        }
    });
};

wsServer.on('request', function (request) {

    // connection of a user with uID
    const userID = getUniqueID();
    console.log((new Date()) + ' Recieved a new connection from origin ' + request.origin + '.');
    // You can rewrite this part of the code to accept only the requests from allowed origin
    const connection = request.accept(null, request.origin);
    connectedClients[userID] = connection;
    console.log('connected: ' + userID + ' in ' + Object.getOwnPropertyNames(connectedClients));

    // user inicialization - client side have to send initial message with his email
    connection.on('message', (message) => {
        if (message.type === 'utf8') {
            let email = message.utf8Data;
            console.log('received:%s', email);
            usersIdToEmail[userID] = email;
            usersEmailToId[email] = userID;
            console.log('Active clients:%s', JSON.stringify(usersIdToEmail));
            //console.log('Active clients:%s', JSON.stringify(usersEmailToId));
        }
    });

    // user disconnected
    connection.on('close', () => {
        console.log((new Date()) + " Peer " + userID + " disconnected.");
        delete connectedClients[userID];
        delete usersEmailToId[usersIdToEmail[userID]];
        delete usersIdToEmail[userID];
    });
});
